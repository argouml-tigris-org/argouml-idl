<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="40" tokens="238">
<file line="1747" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1836" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
		_loop395:
		do {
			switch ( LA(1)) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
			case 'u':  case 'v':  case 'w':  case 'x':
			case 'y':  case 'z':
			{
				matchRange('a','z');
				break;
			}
			case 'A':  case 'B':  case 'C':  case 'D':
			case 'E':  case 'F':  case 'G':  case 'H':
			case 'I':  case 'J':  case 'K':  case 'L':
			case 'M':  case 'N':  case 'O':  case 'P':
			case 'Q':  case 'R':  case 'S':  case 'T':
			case 'U':  case 'V':  case 'W':  case 'X':
			case 'Y':  case 'Z':
			{
				matchRange('A','Z');
				break;
			}
			case '_':
			{
				match('_');
				break;
			}
			case '0':  case '1':  case '2':  case '3':
			case '4':  case '5':  case '6':  case '7':
			case '8':  case '9':
			{
				matchRange('0','9');
				break;
			}
			default:
			{
				break _loop395;
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="214">
<file line="1716" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1805" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
		{
		switch ( LA(1)) {
		case 'a':  case 'b':  case 'c':  case 'd':
		case 'e':  case 'f':  case 'g':  case 'h':
		case 'i':  case 'j':  case 'k':  case 'l':
		case 'm':  case 'n':  case 'o':  case 'p':
		case 'q':  case 'r':  case 's':  case 't':
		case 'u':  case 'v':  case 'w':  case 'x':
		case 'y':  case 'z':
		{
			matchRange('a','z');
			break;
		}
		case 'A':  case 'B':  case 'C':  case 'D':
		case 'E':  case 'F':  case 'G':  case 'H':
		case 'I':  case 'J':  case 'K':  case 'L':
		case 'M':  case 'N':  case 'O':  case 'P':
		case 'Q':  case 'R':  case 'S':  case 'T':
		case 'U':  case 'V':  case 'W':  case 'X':
		case 'Y':  case 'Z':
		{
			matchRange('A','Z');
			break;
		}
		default:
		{
			throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
		}
		}
		}
		{
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="183">
<file line="1716" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1748" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1805" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1837" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
		{
		switch ( LA(1)) {
		case 'a':  case 'b':  case 'c':  case 'd':
		case 'e':  case 'f':  case 'g':  case 'h':
		case 'i':  case 'j':  case 'k':  case 'l':
		case 'm':  case 'n':  case 'o':  case 'p':
		case 'q':  case 'r':  case 's':  case 't':
		case 'u':  case 'v':  case 'w':  case 'x':
		case 'y':  case 'z':
		{
			matchRange('a','z');
			break;
		}
		case 'A':  case 'B':  case 'C':  case 'D':
		case 'E':  case 'F':  case 'G':  case 'H':
		case 'I':  case 'J':  case 'K':  case 'L':
		case 'M':  case 'N':  case 'O':  case 'P':
		case 'Q':  case 'R':  case 'S':  case 'T':
		case 'U':  case 'V':  case 'W':  case 'X':
		case 'Y':  case 'Z':
		{
			matchRange('A','Z');
			break;
		}
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="160">
<file line="1428" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1616" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
		case 'E':  case 'e':
		{
			{
			switch ( LA(1)) {
			case 'e':
			{
				match('e');
				break;
			}
			case 'E':
			{
				match('E');
				break;
			}
			default:
			{
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			}
			{
			switch ( LA(1)) {
			case '+':
			{
				match('+');
				break;
			}
			case '-':
			{
				match('-');
				break;
			}
			case '0':  case '1':  case '2':  case '3':
			case '4':  case '5':  case '6':  case '7':
			case '8':  case '9':
			{
				break;
			}
			default:
			{
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			}
			{
			int _cnt376=0;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="158">
<file line="1009" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1071" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
				}
				else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
				}
				else {
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				
				}
			}
			else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
			}
			else {
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			
			}
			char realc = (char) Integer.valueOf(new String(text.getBuffer(),_begin,text.length()-_begin), 8).intValue(); text.setLength(_begin); text.append(realc);
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="154">
<file line="1336" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1429" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1617" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
				{
				{
				switch ( LA(1)) {
				case 'e':
				{
					match('e');
					break;
				}
				case 'E':
				{
					match('E');
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				{
				switch ( LA(1)) {
				case '+':
				{
					match('+');
					break;
				}
				case '-':
				{
					match('-');
					break;
				}
				case '0':  case '1':  case '2':  case '3':
				case '4':  case '5':  case '6':  case '7':
				case '8':  case '9':
				{
					break;
				}
				default:
				{
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				}
				}
				{
				int _cnt371=0;
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="132">
<file line="1487" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1674" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
			break;
		}
		case 'D':  case 'd':
		{
			{
			switch ( LA(1)) {
			case 'd':
			{
				match('d');
				break;
			}
			case 'D':
			{
				match('D');
				break;
			}
			default:
			{
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			}
			}
			_ttype = FIXED;
			break;
		}
		default:
			{
			}
		}
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mOCTAL(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="131">
<file line="1008" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1062" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
					mOCTDIGIT(false);
				}
				else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
				}
				else {
					throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
				}
				
				}
			}
			else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
			}
			else {
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			
			}
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="115">
<file line="1867" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLParser.java"/>
<file line="6267" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLParser.java"/>
<codefragment>
<![CDATA[
		AST value_element_AST = null;
		
		try {      // for error handling
			{
			switch ( LA(1)) {
			case SCOPEOP:
			case IDENT:
			case LITERAL_const:
			case LITERAL_typedef:
			case LITERAL_native:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_long:
			case LITERAL_short:
			case LITERAL_unsigned:
			case LITERAL_char:
			case LITERAL_wchar:
			case LITERAL_boolean:
			case LITERAL_octet:
			case LITERAL_any:
			case LITERAL_Object:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_enum:
			case LITERAL_string:
			case LITERAL_wstring:
			case LITERAL_exception:
			case LITERAL_oneway:
			case LITERAL_void:
			case LITERAL_ValueBase:
			case LITERAL_typeid:
			case LITERAL_typeprefix:
			case LITERAL_readonly:
			case LITERAL_attribute:
			{
				export();
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_public:
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="114">
<file line="1033" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1059" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
			mHEXDIGIT(false);
			{
			if ((_tokenSet_6.member(LA(1))) && ((LA(2) >= '\u0000' && LA(2) <= '\ufffe')) && (true) && (true)) {
				mHEXDIGIT(false);
			}
			else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
			}
			else {
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			
			}
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="114">
<file line="1037" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<file line="1079" path="/var/snap/jenkins/2767/workspace/_organization_argouml-idl_master/target/generated-sources/antlr/org/argouml/uml/reveng/idl/IDLLexer.java"/>
<codefragment>
<![CDATA[
			}
			else if (((LA(1) >= '\u0000' && LA(1) <= '\ufffe')) && (true) && (true) && (true)) {
			}
			else {
				throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());
			}
			
			}
			char realc = (char) Integer.valueOf(new String(text.getBuffer(),_begin,text.length()-_begin), 16).intValue(); text.setLength(_begin); text.append(realc);
			break;
		}
]]>
</codefragment>
</duplication>
</pmd-cpd>